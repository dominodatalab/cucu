# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
---
version: 2.1

parameters:
  python_version:
    type: string
    default: '3.12.0'
  selenium_version:
    type: string
    default: '117.0'
  se_node_max_sessions:
    type: integer
    default: 12
  se_node_session_timeout:
    type: integer
    default: 300
  screen_width:
    type: integer
    default: 1366
  screen_height:
    type: integer
    default: 768

workflows:
  build-test-publish:
    jobs:
      - pre-commit
      - test:
          name: test-chrome
          browser: chrome
          context:
            - sonarqube_scan_context
          requires:
            - pre-commit
      - test:
          name: test-edge
          browser: edge
          requires:
            - test-chrome
      - test:
          name: test-firefox
          browser: firefox
          requires:
            - test-chrome
      - publish:
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^\d+\.\d+\.\d+/

jobs:
  pre-commit:
    docker:
      - image: cimg/python:<<pipeline.parameters.python_version>>
    resource_class: medium

    steps:
      - checkout
      - run:
          name: install dependencies
          command: |
            set +eo pipefail
            pip install --upgrade pip
            pip install pre-commit
            pre-commit install-hooks

      - install_cucu_dependencies
      - build_cucu_python_package
      - install_cucu_globally
      - run:
          name: run pre-commit validations
          command: pre-commit run --show-diff-on-failure --from-ref origin/HEAD --to-ref HEAD

  test:
    parameters:
      browser:
        type: string
        default: "chrome"

    docker:
      - image: cimg/python:<<pipeline.parameters.python_version>>
      - image: selenium/standalone-<<parameters.browser>>:<<pipeline.parameters.selenium_version>>
        environment:
          SE_NODE_MAX_SESSIONS: <<pipeline.parameters.se_node_max_sessions>>
          SE_NODE_SESSION_TIMEOUT: <<pipeline.parameters.se_node_session_timeout>>
          SCREEN_WIDTH: <<pipeline.parameters.screen_width>>
          SCREEN_HEIGHT: <<pipeline.parameters.screen_height>>
    resource_class: xlarge

    steps:
      - checkout
      - install_cucu_dependencies
      - install_test_dependencies
      - build_cucu_python_package
      - install_cucu_globally
      - setup_remote_docker_env
      - run_sonarqube
      - wait_for_selenium
      - run_functional_tests:
          browser: "<< parameters.browser >>"
      - run_unit_tests
      - code_coverage_check
      - run:
          name: tar up results and reporting
          command: |
            tar cvfz results.tgz results
            tar cvfz report.tgz report
            tar cvfz junit_results.tgz junit_results
          when: always
      - store_artifacts:
          path: results.tgz
      - store_artifacts:
          path: junit_results.tgz
      - store_artifacts:
          path: report.tgz
      - store_test_results:
          path: junit_results

  publish:
    docker:
      - image: cimg/python:<<pipeline.parameters.python_version>>
    steps:
      - checkout
      - install_cucu_dependencies
      - build_cucu_python_package
      - run:
          name: Publish to private PyPI repository
          command: |
            set +eo pipefail
            poetry config repositories.private ${PUBLISH_REPOSITORY}
            poetry config http-basic.private ${PUBLISH_USERNAME} ${PUBLISH_PASSWORD}
            poetry publish -r private

commands:
  install_cucu_dependencies: &install_cucu_dependencies
    steps:
      - run:
          name: install cucu dependencies
          command: |
            set +eo pipefail
            pip install poetry
            python -m virtualenv --upgrade-embed-wheels
            poetry install --no-ansi

  install_test_dependencies: &install_test_dependencies
    steps:
      - run:
          name: install test dependencies
          command: |
            set +eo pipefail
            sudo apt-get update
            sudo apt-get install -y expect

  build_cucu_python_package: &build_cucu_python_package
    steps:
      - run:
          name: build the cucu python package
          command: poetry build

  install_cucu_globally: &install_cucu_globally
    steps:
      - run:
          name: install cucu globally
          command: pip install dist/cucu-*.tar.gz

  setup_remote_docker_env: &setup_remote_docker_env
    steps:
      - setup_remote_docker:
          version: 20.10.14

  wait_for_selenium: &wait_for_selenium
    steps:
      - run:
          # retry connection every 5s x 60 which is a total of 5 minutes
          command: curl --retry 60 --retry-delay 5 --retry-connrefused http://localhost:4444

  run_functional_tests: &run_functional_tests
    parameters:
      browser:
        type: string
        default: "chrome"
    steps:
      - run:
          command: poetry run cucu run features --workers 6 --selenium-remote-url http://localhost:4444 --generate-report --junit junit_results --browser "<< parameters.browser >>"
          environment:
            COVERAGE_PROCESS_START: pyproject.toml  # set to config file

  run_unit_tests: &run_unit_tests
    steps:
      - run:
          name: run unit tests
          command: poetry run coverage run -m pytest --junit-xml=results/unit-tests.xml

  code_coverage_check: &code_coverage_check
    steps:
      - run:
          command: |
            set +eo pipefail
            poetry run coverage combine .coverage.*
            poetry run coverage html
            poetry run coverage report --fail-under=70

  run_sonarqube: &run_sonarqube
    when:
      condition:
        equal: ["<< parameters.browser >>", "chrome"]
      steps:
        - run:
            name: install sonar and dependencies
            command: |
              set -exuo pipefail
              curl -fsSL https://deb.nodesource.com/setup_15.x | sudo -E bash -
              sudo apt-get install -y nodejs
              node -v

              sudo apt-get install -y jq
              jq --version

              echo "download and install"
              wget -O sonar-scanner.zip https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-5.0.1.3006-linux.zip
              unzip -q sonar-scanner.zip
              ./sonar-scanner/bin/sonar-scanner --version
        - run:
            name: Run sonar-scanner
            command: |
              set -exuo pipefail
              sudo apt-get install -y jq

              export SONAR_SCANNER_OPTS="-Xmx2048m"
              SONAR_CMD="eval ./sonar-scanner/bin/sonar-scanner \
                -Dsonar.projectKey=cucu \
                -Dsonar.sources=. \
                -Dsonar.host.url=${SONARQUBE_HOST_URL} \
                -Dsonar.login=${SONARQUBE_TOKEN}"

              # Check if there is an open pull request
              if [[ ! -z $CIRCLE_PULL_REQUEST ]]; then
                pr=$(echo https://api.github.com/repos/${CIRCLE_PULL_REQUEST:19} | sed "s/\/pull\//\/pulls\//")
                base_branch=$(curl -s -H "Authorization: token ${GITHUB_TOKEN}" $pr | jq -r '.base.ref')
                SONAR_CMD+=" \
                -Dsonar.pullrequest.key=${CIRCLE_PULL_REQUEST##*/} \
                -Dsonar.pullrequest.branch=${CIRCLE_BRANCH} \
                -Dsonar.pullrequest.base=${base_branch}"
              else
                SONAR_CMD+=" \
                -Dsonar.branch.name=${CIRCLE_BRANCH}"
              fi

              echo "Running sonarqube analysis... $SONAR_CMD"
              eval $SONAR_CMD